@using ProjectsDocumentation.BlazorWebApp.Dtos.Endpoints
@using ProjectsDocumentation.BlazorWebApp.Dtos.Projects.Details
@using ProjectsDocumentation.BlazorWebApp.Enums
@using ProjectsDocumentation.BlazorWebApp.Interfaces.Endpoints
@using ProjectsDocumentation.BlazorWebApp.Requests.Endpoints
@using ProjectsDocumentation.BlazorWebApp.Requests.Endpoints.AddEndpoint
@using ProjectsDocumentation.BlazorWebApp.Requests.Endpoints.AddEndpointVersion
@using ProjectsDocumentation.BlazorWebApp.Requests.Endpoints.UpdateEndpointVersion
@page "/projects/{ProjectId:int}/endpoints/{EndpointId:int}/versions/Update/{VersionId:int}"
@inject IProjectService projectService
@inject IEndpointService endpointService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ILogger<UpdateVersion> Logger

<PageTitle>Add New Version</PageTitle>

<nav class="navbar navbar-expand-lg py-3" style="background-color: #e3f2fd;" data-bs-theme="light">
    <div class="container-fluid">
        <a class="navbar-brand fs-3 fw-bold d-flex align-items-center gap-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-journal-bookmark" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M6 8V1h1v6.117L8.743 6.07a.5.5 0 0 1 .514 0L11 7.117V1h1v7a.5.5 0 0 1-.757.429L9 7.083 6.757 8.43A.5.5 0 0 1 6 8" />
                <path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2" />
            </svg>
            Projects Documentation
        </a>
    </div>
</nav>

@if (errorMessage != null)
{
    <div class="alert alert-danger alert-dismissible fade show m-3" role="alert">
        <strong>Error!</strong> @errorMessage
        <button type="button" class="btn-close" @onclick="ClearErrorMessage"></button>
    </div>
}

<div class="d-flex justify-content-center">
    <div class="d-flex flex-wrap gap-3 p-3">
        <div class="card border-primary border border-2 rounded-3" style="width: 65rem;">
            <span class="card-header fs-4 fw-bold text-primary text-center">Update Version</span>
            <div class="card-body">

                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="floatingInput" @bind="NewVersion.Version">
                    <label for="floatingInput">Version</label>
                </div>

                <div class="form-floating mb-3">
                    <textarea type="text" class="form-control" id="floatingInput" @bind="NewVersion.Description"></textarea>
                    <label for="floatingInput">Description</label>
                </div>

                <!-- Reflection Tables Dropdown -->
                <div class="dropdown d-flex mb-3 justify-content-center">
                    <button class="btn btn-outline-primary dropdown-toggle" style="width:20rem" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        @(SelectedValues.Count == 0 ? "Select Reflection Tables" : $"{SelectedValues.Count} table(s) selected")
                    </button>
                    <div class="dropdown-menu reflection-dropdown p-3" style="width: 20rem; max-height: 300px; overflow-y: auto;">
                        <h6 class="dropdown-header text-primary fw-bold">Reflection Tables</h6>

                        <!-- Search -->
                        <input type="text" class="form-control mb-2" placeholder="Search..." @bind="searchTerm" @bind:event="oninput" />

                        <!-- Select All / Clear All -->
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <button class="btn btn-sm btn-outline-secondary" @onclick="SelectAll">
                                <i class="bi bi-check2-square"></i> Select All
                            </button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="ClearAll">
                                <i class="bi bi-x-square"></i> Clear All
                            </button>
                        </div>
                        @if (projectTablesDtos == null)
                        {
                            <div class="text-center p-2">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (!filteredOptions.Any())
                        {
                            <div class="text-muted p-2">No tables found</div>
                        }
                        else
                        {
                            @foreach (var item in filteredOptions)
                            {
                                <div class="form-check mb-1">
                                    <input class="form-check-input" type="checkbox" id="check_@item.Id" checked="@SelectedValues.Contains(item.Id)" @onchange="() => ToggleSelection(item.Id)" />
                                    <label class="form-check-label" for="check_@item.Id">@item.Name</label>
                                </div>
                            }
                        }


                    </div>
                </div>

                @if (SelectedValues.Any())
                {
                    <div class="mb-3">
                        @foreach (var val in SelectedValues)
                        {
                            <span class="badge bg-primary me-1 mb-1"> @projectTablesDtos.FirstOrDefault(o => o.Id == val)?.Name </span>
                        }
                    </div>
                }
                <!-- #endregion -->
                <!--Add Request and Response-->
                <ul class="nav nav-tabs mb-3">
                    <li class="nav-item">
                        <button class="nav-link @(activeDetailTab == "request" ? "active" : "")" @onclick="@(() => SetActiveDetailTab("request"))">
                            Requests
                        </button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link @(activeDetailTab == "response" ? "active" : "")" @onclick="@(() => SetActiveDetailTab("response"))">
                            Responses
                        </button>
                    </li>
                </ul>

                @if (activeDetailTab == "request")
                {
                    <div>
                        <div class="form-floating mb-3">
                            <textarea class="form-control" id="headersInput" style="height:8rem" @bind="NewVersion.UpdateEnpointRequestRequest.Header"></textarea>
                            <label for="headersInput">Headers JSON Text</label>
                        </div>

                        <div class="form-floating mb-3">
                            <textarea class="form-control" id="bodyInput" style="height:8rem" @bind="NewVersion.UpdateEnpointRequestRequest.Body"></textarea>
                            <label for="bodyInput">Body JSON Text</label>
                        </div>

                        <div class="form-floating mb-3">
                            <textarea class="form-control" id="queryInput" style="height:8rem" @bind="NewVersion.UpdateEnpointRequestRequest.QuerParameters"></textarea>
                            <label for="queryInput">Query Parameters JSON Text</label>
                        </div>
                    </div>
                }
                else if (activeDetailTab == "response")
                {
                    if (NewVersion.UpdateEnpointResponseRequests != null && NewVersion.UpdateEnpointResponseRequests.Any())
                    {
                        @foreach (var model in NewVersion.UpdateEnpointResponseRequests)
                        {
                            <div class="d-flex justify-content-between align-items-center mt-4 gap-2 border border-secondary-subtle p-2 rounded">
                                <select class="form-select border border-1 rounded-3" style="width:12rem" @bind="model.StatusCode">
                                    @foreach (var statusCode in Enum.GetValues(typeof(StatusCode)))
                                    {
                                        <option value="@statusCode">@statusCode.ToString()</option>
                                    })
                                </select>

                                <input type="text" class="form-control" id="exampleFormControlInput" placeholder="Response JSON Text" @bind="model.Response">

                                <button class="btn btn-outline-danger px-4 py-2" @onclick="() => RemoveResponse(model)">
                                    <i class="bi bi-x-circle me-2"></i>Remove
                                </button>
                            </div>
                        }
                    }


                    <div class="d-flex justify-content-end align-items-center mt-4 gap-2">
                        <button class="btn btn-outline-primary px-4 py-2" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="AddNewResponse">
                            <i class="bi bi-plus-circle me-2"></i>Add Response
                        </button>
                    </div>

                    <!-- popup to add response -->
                    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content rounded-3 shadow">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="exampleModalLabel">Add New Response</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>

                                <div class="modal-body">

                                    <div class="mb-3">
                                        <label for="dropdownSelect" class="form-label">Choose Option</label>
                                        <select class="form-select" id="dropdownSelect" @bind="newResponse.StatusCode">
                                            <option selected disabled>-- Select an option --</option>
                                            @foreach (var statusCode in Enum.GetValues(typeof(StatusCode)))
                                            {
                                                <option value="@statusCode">@statusCode.ToString()</option>
                                            }
                                        </select>
                                    </div>

                                    <div class="form-floating mb-3">
                                        <textarea type="text" style="height:10rem" class="form-control" id="floatingInput" @bind="newResponse.Response"></textarea>
                                        <label for="floatingInput">Response JSON Text</label>
                                    </div>
                                </div>

                                <div class="modal-footer">
                                    <button id="ClosePopUp" type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-outline-primary" @onclick="AddResponse">Submit</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Reflection Tables Dropdown -->
                }
                <!--#endregion-->

                <div class="d-flex justify-content-end align-items-center mt-4 gap-3">
                    <div>
                        <button class="btn btn-outline-primary px-4 py-2" @onclick="async () => await Save()">
                            <i class="bi bi-plus-circle me-2"></i>Update Version
                        </button>
                        <button class="btn btn-outline-danger px-4 py-2" @onclick="Cancel">
                            <i class="bi bi-x-circle me-2"></i>Cancel
                        </button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@code {
    private string errorMessage;

    [Parameter]
    public int EndpointId { get; set; }

    [Parameter]
    public int VersionId { get; set; }

    [Parameter]
    public int ProjectId { get; set; }

    private string activeDetailTab = "request";
    private UpdateEndpointVersionRequest NewVersion { get; set; } = new UpdateEndpointVersionRequest
    {
        UpdateEnpointRequestRequest = new(),
        UpdateEnpointResponseRequests = new List<UpdateEnpointVersionResponseRequest>(),
        ReflectionTableIds = new List<int>()
    };

    private UpdateEnpointVersionResponseRequest newResponse = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            projectTablesDtos = await projectService.GetProjectReflectionTables(ProjectId);
            EndpointVersionDto endpoint = await endpointService.GetEndpointVersionDetails(VersionId);
            NewVersion = new UpdateEndpointVersionRequest
            {
                Id = endpoint.Id,
                Version = endpoint.Version,
                Description = endpoint.Description,
                UpdateEnpointRequestRequest = new UpdateEnpointVersionRequestRequest
                {
                    Id = endpoint.Id,
                    Header = endpoint.EndpointRequestDtos.FirstOrDefault().Header,
                    Body = endpoint.EndpointRequestDtos.FirstOrDefault().Body,
                    QuerParameters = endpoint.EndpointRequestDtos.FirstOrDefault().Query
                },
                UpdateEnpointResponseRequests = endpoint.EndpointResponseDtos.Select(r => new UpdateEnpointVersionResponseRequest
                {
                    Id = r.Id,
                    StatusCode = r.StatusCode,
                    Response = r.Response
                }).ToList(),
                ReflectionTableIds = endpoint.ReflectionTables.Select(r => r.Id).ToList()
            };
            SelectedValues = projectTablesDtos.Where(x => endpoint.ReflectionTables.Select(r => r.TableName).Contains(x.Name)).Select(x => x.Id).ToList();
            //SelectedValues = NewVersion.ReflectionTableIds;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex, "");
            errorMessage = $"Failed to update version. Please try again. {ex.Message}";
        }

    }

    private void ClearErrorMessage()
    {
        errorMessage = null;
    }

    private void AddResponse()
    {
        NewVersion.UpdateEnpointResponseRequests ??= new List<UpdateEnpointVersionResponseRequest>();
        NewVersion.UpdateEnpointResponseRequests.Add(newResponse);
        newResponse = new();
    }

    private void AddNewResponse()
    {
        newResponse = new();
    }

    private void RemoveResponse(UpdateEnpointVersionResponseRequest enpointResponseRequest)
    {
        NewVersion.UpdateEnpointResponseRequests.Remove(enpointResponseRequest);
    }

    private void SetActiveDetailTab(string tab)
    {
        activeDetailTab = tab;
    }

    #region Multi Select Drop Down list
    private List<ProjectTablesDto> projectTablesDtos;
    private List<int> SelectedValues = new();
    private string searchTerm = "";

    private IEnumerable<ProjectTablesDto> filteredOptions =>
       string.IsNullOrWhiteSpace(searchTerm)
           ? projectTablesDtos
           : projectTablesDtos.Where(o => o.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private void ToggleSelection(int value)
    {
        if (SelectedValues.Contains(value))
            SelectedValues.Remove(value);
        else
            SelectedValues.Add(value);
    }

    private void SelectAll()
    {
        SelectedValues = filteredOptions.Select(o => o.Id).ToList();
    }

    private void ClearAll()
    {
        SelectedValues.Clear();
    }
    #endregion

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/projects/{ProjectId}");
    }

    private async Task Save()
    {
        try
        {
            NewVersion.ReflectionTableIds = SelectedValues;
            await endpointService.UpdateEndpointVersionAsync(EndpointId, NewVersion);
            NavigationManager.NavigateTo($"/projects/{ProjectId}");
        }
        catch(Exception ex)
        {
            Logger.LogError(ex, "");
            errorMessage = $"Failed to update version. Please try again. {ex.Message}";
        }    
        
    }
}